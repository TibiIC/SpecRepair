%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Background Knowledge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ---*** Domain independent Axioms ***---

next_timepoint_exists(T1,S):-
    next(T2,T1,S).

% If the next time point does not exist,
% atom F holds and not holds weakly
common_weak_next(F,P,S):-
    trace(S),
    atom(F),
    timepoint(P,S),
    not next_timepoint_exists(P,S).

holds_at_weak_next(F,P,S):-
    common_weak_next(F,P,S),
    not not_holds_at_weak_next(F,P,S).

not_holds_at_weak_next(F,P,S):-
    common_weak_next(F,P,S),
    not holds_at_weak_next(F,P,S).

holds_at_next(F,P,S):-  % Weak Definition
    holds_at_weak_next(F,P,S).

not_holds_at_next(F,P,S):-  % Weak Definition
    not_holds_at_weak_next(F,P,S).

holds_at_next(F,P,S):- % Strong Definition
	next(P2,P,S),
	holds_at(F,P2,S).

not_holds_at_next(F,P,S):- % Strong Definition
	next(P2,P,S),
	not_holds_at(F,P2,S).

holds_at_prev(F,P,S):-
	next(P,P2,S),
	holds_at(F,P2,S).

not_holds_at_prev(F,P,S):-
	next(P,P2,S),
	not_holds_at(F,P2,S).

after(T2,T1,S):- % Base Case
    next(T2,T1,S).

after(T3,T1,S):- % Recursive Step
    next(T2,T1,S),
    after(T3,T2,S).

holds_at_weak_eventually(F,P,S):-
    trace(S),
    atom(F),
    timepoint(P,S),
    not next_timepoint_exists(P,S).

holds_at_weak_eventually(F,P,S):- % Weak Definition
    holds_at_eventually(F,P,S).

holds_at_weak_eventually(F,P,S):- % Weak Definition
    not_holds_at_eventually(F,P,S).

holds_at_eventually(F,P,S):- % Base Case (holds now)
    trace(S),
    atom(F),
    timepoint(P,S),
    holds_at(F,P,S).

holds_at_eventually(F,P,S):- % Strong Definition
    trace(S),
    atom(F),
    timepoint(P,S),
    after(P2,P,S),
    holds_at(F,P2,S).

not_holds_at_eventually(F,P,S):- % Base Case (not_holds now)
    trace(S),
    atom(F),
    timepoint(P,S),
    not_holds_at(F,P,S).

not_holds_at_eventually(F,P,S):- % Strong Definition
    trace(S),
    atom(F),
    timepoint(P,S),
    after(P2,P,S),
    not_holds_at(F,P2,S).

eq(T1,T2):-
	trace(S),
	timepoint(T1,S),
	timepoint(T2,S),
	T1 == T2.

:- 	atom(F),
	trace(S),
	timepoint(T,S),
	not_holds_at(F,T,S),
	holds_at(F,T,S).

holds_non_vacuously(E, T1, S):-
	exp(E),
	trace(S),
	timepoint(T1,S),
	antecedent_holds(E, T1, S),
	consequent_holds(E, T1, S).

holds_vacuously(E, T1, S):-
	exp(E),
	trace(S),
	timepoint(T1,S),
	not antecedent_holds(E, T1, S).

holds(G, T, S):-
	timepoint(T,S),
	trace(S),
	exp(G),
	holds_non_vacuously(G, T, S).

holds(G, T, S):-
	timepoint(T,S), trace(S),
	exp(G),
	holds_vacuously(G, T, S).

violation_holds(G,T,S):-
	exp(G),
	trace(S),
	timepoint(T,S),
	not holds(G,T,S).
	%,
	%timepoint(T1,S),
	%next(T1,T,S).

violated(S):-
	exp(G),
	trace(S),
	timepoint(T,S),
	violation_holds(G,T,S).

entailed(S):-
	trace(S),
	not violated(S).

exp(E):-
	guarantee(E).

exp(E):-
	assumption(E).


% ---*** Domain dependent Axioms ***---

